{"version":3,"sources":["ScrollViewGesture.tsx"],"names":["React","PanGestureHandler","Animated","cancelAnimation","measure","runOnJS","useAnimatedGestureHandler","useAnimatedReaction","useAnimatedRef","useDerivedValue","useSharedValue","withDecay","Easing","CTX","dealWithAnimation","IScrollViewGesture","props","vertical","pagingEnabled","snapEnabled","panGestureHandlerProps","loop","infinite","scrollAnimationDuration","withAnimation","enabled","dataLength","overscrollEnabled","useContext","size","translation","testID","style","onScrollBegin","onScrollEnd","onTouchBegin","onTouchEnd","maxPage","isHorizontal","touching","scrollEndTranslation","scrollEndVelocity","containerRef","getLimit","useCallback","width","containerWidth","withSpring","toValue","onFinished","defaultWithAnimation","type","config","duration","easing","easeOutQuart","isFinished","endWithSpring","origin","value","velocity","finalTranslation","deceleration","offset","computed","Math","ceil","floor","page","finalPage","withProcessTranslation","min","max","nextPage","round","limit","sign","abs","onFinish","activeDecay","resetBoundary","panGestureEventHandler","onStart","_","ctx","validStart","panOffset","onActive","e","translationX","translationY","panTranslation","boundary","fixed","dynamic","translationValue","onEnd","velocityX","velocityY","children","ScrollViewGesture"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport type { StyleProp, ViewStyle } from \"react-native\";\nimport type { PanGestureHandlerGestureEvent } from \"react-native-gesture-handler\";\nimport {\n  PanGestureHandler,\n} from \"react-native-gesture-handler\";\nimport Animated, {\n  cancelAnimation,\n  measure,\n  runOnJS,\n  useAnimatedGestureHandler,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useDerivedValue,\n  useSharedValue,\n  withDecay,\n} from \"react-native-reanimated\";\n\nimport { Easing } from \"./constants\";\nimport { CTX } from \"./store\";\nimport type { WithTimingAnimation } from \"./types\";\nimport { dealWithAnimation } from \"./utils/dealWithAnimation\";\n\ninterface GestureContext extends Record<string, unknown> {\n  validStart: boolean\n  panOffset: number\n  max: number\n}\n\ninterface Props {\n  size: number\n  infinite?: boolean\n  testID?: string\n  style?: StyleProp<ViewStyle>\n  onScrollBegin?: () => void\n  onScrollEnd?: () => void\n  onTouchBegin?: () => void\n  onTouchEnd?: () => void\n  translation: Animated.SharedValue<number>\n}\n\nconst IScrollViewGesture: React.FC<Props> = (props) => {\n  const {\n    props: {\n      vertical,\n      pagingEnabled,\n      snapEnabled,\n      panGestureHandlerProps,\n      loop: infinite,\n      scrollAnimationDuration,\n      withAnimation,\n      enabled,\n      dataLength,\n      overscrollEnabled,\n    },\n  } = React.useContext(CTX);\n\n  const {\n    size,\n    translation,\n    testID,\n    style = {},\n    onScrollBegin,\n    onScrollEnd,\n    onTouchBegin,\n    onTouchEnd,\n  } = props;\n\n  const maxPage = dataLength;\n  const isHorizontal = useDerivedValue(() => !vertical, [vertical]);\n  const touching = useSharedValue(false);\n  const scrollEndTranslation = useSharedValue(0);\n  const scrollEndVelocity = useSharedValue(0);\n  const containerRef = useAnimatedRef<Animated.View>();\n\n  // Get the limit of the scroll.\n  const getLimit = React.useCallback(() => {\n    \"worklet\";\n\n    if (!infinite && !overscrollEnabled) {\n      const { width: containerWidth = 0 } = measure(containerRef);\n\n      // If the item's total width is less than the container's width, then there is no need to scroll.\n      if (dataLength * size < containerWidth)\n        return 0;\n\n      // Disable the \"overscroll\" effect\n      return dataLength * size - containerWidth;\n    }\n\n    return dataLength * size;\n  }, [infinite, size, dataLength, overscrollEnabled]);\n\n  const withSpring = React.useCallback(\n    (toValue: number, onFinished?: () => void) => {\n      \"worklet\";\n      const defaultWithAnimation: WithTimingAnimation = {\n        type: \"timing\",\n        config: {\n          duration: scrollAnimationDuration + 100,\n          easing: Easing.easeOutQuart,\n        },\n      };\n\n      return dealWithAnimation(withAnimation ?? defaultWithAnimation)(\n        toValue,\n        (isFinished: boolean) => {\n          \"worklet\";\n          if (isFinished)\n            onFinished && runOnJS(onFinished)();\n        },\n      );\n    },\n    [scrollAnimationDuration, withAnimation],\n  );\n\n  const endWithSpring = React.useCallback(\n    (onFinished?: () => void) => {\n      \"worklet\";\n      const origin = translation.value;\n      const velocity = scrollEndVelocity.value;\n      // Default to scroll in the direction of the slide (with deceleration)\n      let finalTranslation: number = withDecay({ velocity, deceleration: 0.999 });\n\n      /**\n       * The page size is the same as the item size.\n       * If direction is vertical, the page size is the height of the item.\n       * If direction is horizontal, the page size is the width of the item.\n       *\n       * `page size` equals to `size` variable.\n       * */\n      if (pagingEnabled) {\n        // distance with direction\n        const offset = -(scrollEndTranslation.value >= 0 ? 1 : -1); // 1 or -1\n        const computed = offset < 0 ? Math.ceil : Math.floor;\n        const page = computed(-translation.value / size);\n\n        if (infinite) {\n          const finalPage = page + offset;\n          finalTranslation = withSpring(withProcessTranslation(-finalPage * size), onFinished);\n        }\n        else {\n          const finalPage = Math.min(maxPage - 1, Math.max(0, page + offset));\n          finalTranslation = withSpring(withProcessTranslation(-finalPage * size), onFinished);\n        }\n      }\n\n      if (!pagingEnabled && snapEnabled) {\n        // scroll to the nearest item\n        const nextPage = Math.round((origin + velocity * 0.4) / size) * size;\n        finalTranslation = withSpring(withProcessTranslation(nextPage), onFinished);\n      }\n\n      translation.value = finalTranslation;\n\n      function withProcessTranslation(translation: number) {\n        if (!infinite && !overscrollEnabled) {\n          const limit = getLimit();\n          const sign = Math.sign(translation);\n          return sign * Math.max(0, Math.min(limit, Math.abs(translation)));\n        }\n\n        return translation;\n      }\n    },\n    [\n      translation,\n      scrollEndVelocity.value,\n      pagingEnabled,\n      size,\n      scrollEndTranslation.value,\n      infinite,\n      withSpring,\n      snapEnabled,\n      maxPage,\n    ],\n  );\n\n  const onFinish = React.useCallback(\n    (isFinished: boolean) => {\n      \"worklet\";\n      if (isFinished) {\n        touching.value = false;\n        onScrollEnd && runOnJS(onScrollEnd)();\n      }\n    },\n    [onScrollEnd, touching],\n  );\n\n  const activeDecay = React.useCallback(() => {\n    \"worklet\";\n    touching.value = true;\n    translation.value = withDecay(\n      { velocity: scrollEndVelocity.value },\n      isFinished => onFinish(isFinished as boolean),\n    );\n  }, [onFinish, scrollEndVelocity.value, touching, translation]);\n\n  const resetBoundary = React.useCallback(() => {\n    \"worklet\";\n    if (touching.value)\n      return;\n\n    if (translation.value > 0) {\n      if (scrollEndTranslation.value < 0) {\n        activeDecay();\n        return;\n      }\n      if (!infinite) {\n        translation.value = withSpring(0);\n        return;\n      }\n    }\n\n    if (translation.value < -((maxPage - 1) * size)) {\n      if (scrollEndTranslation.value > 0) {\n        activeDecay();\n        return;\n      }\n      if (!infinite)\n        translation.value = withSpring(-((maxPage - 1) * size));\n    }\n  }, [\n    touching.value,\n    translation,\n    maxPage,\n    size,\n    scrollEndTranslation.value,\n    infinite,\n    activeDecay,\n    withSpring,\n  ]);\n\n  useAnimatedReaction(\n    () => translation.value,\n    () => {\n      if (!pagingEnabled)\n        resetBoundary();\n    },\n    [pagingEnabled, resetBoundary],\n  );\n\n  const panGestureEventHandler = useAnimatedGestureHandler<\n  PanGestureHandlerGestureEvent,\n  GestureContext\n  >(\n    {\n      onStart: (_, ctx) => {\n        touching.value = true;\n        ctx.validStart = true;\n        onScrollBegin && runOnJS(onScrollBegin)();\n\n        ctx.max = (maxPage - 1) * size;\n        if (!infinite && !overscrollEnabled)\n          ctx.max = getLimit();\n\n        ctx.panOffset = translation.value;\n      },\n      onActive: (e, ctx) => {\n        if (ctx.validStart) {\n          ctx.validStart = false;\n          cancelAnimation(translation);\n        }\n        touching.value = true;\n        const { translationX, translationY } = e;\n        const panTranslation = isHorizontal.value\n          ? translationX\n          : translationY;\n        if (!infinite) {\n          if ((translation.value > 0 || translation.value < -ctx.max)) {\n            const boundary = translation.value > 0 ? 0 : -ctx.max;\n            const fixed = boundary - ctx.panOffset;\n            const dynamic = panTranslation - fixed;\n            translation.value = boundary + dynamic * 0.5;\n            return;\n          }\n        }\n\n        const translationValue = ctx.panOffset + panTranslation;\n        translation.value = translationValue;\n      },\n      onEnd: (e) => {\n        const { velocityX, velocityY, translationX, translationY } = e;\n        scrollEndVelocity.value = isHorizontal.value\n          ? velocityX\n          : velocityY;\n        scrollEndTranslation.value = isHorizontal.value\n          ? translationX\n          : translationY;\n\n        endWithSpring(onScrollEnd);\n\n        if (!infinite)\n          touching.value = false;\n      },\n    },\n    [\n      pagingEnabled,\n      isHorizontal.value,\n      infinite,\n      maxPage,\n      size,\n      snapEnabled,\n      onScrollBegin,\n      onScrollEnd,\n    ],\n  );\n\n  return (\n    <PanGestureHandler\n      {...panGestureHandlerProps}\n      enabled={enabled}\n      onGestureEvent={panGestureEventHandler}\n    >\n      <Animated.View\n        ref={containerRef}\n        testID={testID}\n        style={style}\n        onTouchStart={onTouchBegin}\n        onTouchEnd={onTouchEnd}\n      >\n        {props.children}\n      </Animated.View>\n    </PanGestureHandler>\n  );\n};\n\nexport const ScrollViewGesture = IScrollViewGesture;\n"]}